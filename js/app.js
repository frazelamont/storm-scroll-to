(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _stormScrollTo = require('./libs/storm-scroll-to');

var _stormScrollTo2 = _interopRequireDefault(_stormScrollTo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var onDOMContentLoadedTasks = [function () {
	var scrollTo = _stormScrollTo2.default.init('.js-scroll-to');
	console.log(scrollTo);
}];

if ('addEventListener' in window) window.addEventListener('DOMContentLoaded', function () {
	onDOMContentLoadedTasks.forEach(function (fn) {
		return fn();
	});
});

},{"./libs/storm-scroll-to":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
/**
 * @name storm-scrollto: Smooth scroll anchor links, update the URL ad focus on the first child node of the target
 * @version 1.0.0: Fri, 17 Mar 2017 17:33:32 GMT
 * @author stormid
 * @license MIT
 */
var triggerEvents = ['click', 'keydown'],
    CONSTANTS = {
	EASING: {
		//https://github.com/danro/jquery-easing/blob/master/jquery.easing.js
		easeInQuad: function easeInQuad(t, b, c, d) {
			return c * (t /= d) * t + b;
		},
		easeOutQuad: function easeOutQuad(t, b, c, d) {
			return -c * (t /= d) * (t - 2) + b;
		},
		easeInOutQuad: function easeInOutQuad(t, b, c, d) {
			if ((t /= d / 2) < 1) return c / 2 * t * t + b;
			return -c / 2 * (--t * (t - 2) - 1) + b;
		},
		easeInCubic: function easeInCubic(t, b, c, d) {
			return c * (t /= d) * t * t + b;
		},
		easeOutCubic: function easeOutCubic(t, b, c, d) {
			return c * ((t = t / d - 1) * t * t + 1) + b;
		},
		easeInOutCubic: function easeInOutCubic(t, b, c, d) {
			if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
			return c / 2 * ((t -= 2) * t * t + 2) + b;
		},
		easeInQuart: function easeInQuart(t, b, c, d) {
			return c * (t /= d) * t * t * t + b;
		},
		easeOutQuart: function easeOutQuart(t, b, c, d) {
			return -c * ((t = t / d - 1) * t * t * t - 1) + b;
		},
		easeInOutQuart: function easeInOutQuart(t, b, c, d) {
			if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
			return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
		},
		easeInQuint: function easeInQuint(t, b, c, d) {
			return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
		},
		easeOutQuint: function easeOutQuint(t, b, c, d) {
			if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
			return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
		},
		easeInOutQuint: function easeInOutQuint(t, b, c, d) {
			if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
			return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
		}
	}
},
    defaults = {
	easing: 'easeInOutCubic',
	speed: 260, //duration to scroll the entire height of the document
	offset: 0,
	pushState: true,
	focus: true,
	callback: false
},
    StormScrollTo = {
	init: function init() {
		this.initNavItems();
		this.initListeners();
		this.initFocusable();
		return this;
	},
	initNavItems: function initNavItems() {
		this.navItems = this.DOMElements.map(function (item) {
			if (!document.querySelector(item.getAttribute('href'))) throw new Error('Scroll To cannot be initialised, a nav item target is missing');
			return {
				node: item,
				target: document.querySelector(item.getAttribute('href')) || null
			};
		});
	},
	initListeners: function initListeners() {
		var _this = this;

		this.navItems.forEach(function (el) {
			triggerEvents.forEach(function (ev) {
				el.node.addEventListener(ev, function (e) {
					e.preventDefault();
					_this.scrollTo(el);
				}, false);
			});
		});
	},
	initFocusable: function initFocusable() {
		if (!this.settings.focus) return;

		var getFocusableChildren = function getFocusableChildren(node) {
			var focusableElements = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex="-1"])'];

			return [].slice.call(node.querySelectorAll(focusableElements.join(','))).filter(function (child) {
				return !!(child.offsetWidth || child.offsetHeight || child.getClientRects().length);
			});
		};

		this.navItems.forEach(function (item) {
			item.focusableChildren = getFocusableChildren(item.target);
		});
	},
	scrollTo: function scrollTo(el) {
		var _this2 = this;

		var start = window.pageYOffset,
		    end = el.target.offsetTop - this.settings.offset,
		    change = end - start,
		    duration = this.settings.speed,
		    move = function move(amount) {
			document.documentElement.scrollTop = amount;
			document.body.parentNode.scrollTop = amount;
			document.body.scrollTop = amount;
		},
		    currentTime = 0,
		    increment = 16,
		    animate = function animate() {
			currentTime += increment;
			move(CONSTANTS.EASING[_this2.settings.easing](currentTime, start, change, duration));
			if (currentTime < duration) {
				window.requestAnimationFrame(animate.bind(_this2));
			} else {
				!!_this2.settings.pushState && !!window.history.pushState && window.history.pushState({ URL: el.node.getAttribute('href') }, '', el.node.getAttribute('href'));
				!!_this2.settings.focus && !!el.focusableChildren.length && window.setTimeout(function () {
					el.focusableChildren[0].focus();
				}, 0);
				!!_this2.settings.callback && _this2.settings.callback();
			}
		};
		animate();
	},
	destroy: function destroy() {
		var _this3 = this;

		this.navItems.forEach(function (el) {
			triggerEvents.forEach(function (ev) {
				el.node.removeEventListener(ev, function (e) {
					e.preventDefault();
					_this3.scrollTo(el);
				});
			});
		});
	}
};

var init = function init(sel, opts) {
	var els = [].slice.call(document.querySelectorAll(sel));

	if (!els.length) throw new Error('Scroll To cannot be initialised, no augmentable elements found');

	return Object.assign(Object.create(StormScrollTo), {
		DOMElements: els,
		settings: Object.assign({}, defaults, opts)
	}).init();
};

exports.default = { init: init };

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
